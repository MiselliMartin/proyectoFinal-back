generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int                   @id @default(autoincrement())
  username       String                @unique
  email          String                @unique
  password       String
  createdAt      DateTime              @default(now()) @map("created_at")
  updatedAt      DateTime              @updatedAt @map("updated_at")
  birthDate      DateTime
  firstName      String
  lastName       String
  createdBy      Event[]
  event          UserInEvent[]
  likedMeals     UsersLikedMeals[]
  likedMovies    UsersLikedMovies[]
  likedPlaces    UsersLikedPlaces[]
  dislikedMeals  UsersDislikedMeals[]
  dislikedMovies UsersDislikedMovies[]
  dislikedPlaces UsersDislikedPlaces[]

  @@map("users")
}

model Event {
  id              Int               @id @default(autoincrement())
  userId          Int               
  name            String            @db.VarChar(80)
  plannedDate     DateTime
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  user            User              @relation(fields: [userId], references: [id])
  event_decisions EventDecisions[]
  users           UserInEvent[]

  @@map("events")
}

model UserInEvent {
  id        Int      @id @default(autoincrement())
  userId    Int
  eventId   Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  event     Event    @relation(fields: [eventId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, eventId])
  @@map("users_in_event")
}

model Movie {
  id              Int                   @id @default(autoincrement())
  title           String                @db.VarChar(80)
  description     String?
  duration        Int?
  genre           String?                @db.VarChar(50)
  createdAt       DateTime              @default(now()) @map("created_at")
  updatedAt       DateTime              @updatedAt @map("updated_at")
  urlImage        String?               @db.VarChar(255)
  event_decisions EventDecisions[]
  usersLiked      UsersLikedMovies[]
  usersDisliked   UsersDislikedMovies[]

  @@map("movies")
}

model Meal {
  id              Int                  @id @default(autoincrement())
  name            String               @db.VarChar(80)
  description     String?
  createdAt       DateTime             @default(now()) @map("created_at")
  updatedAt       DateTime             @updatedAt @map("updated_at")
  urlImage        String?              @db.VarChar(255)
  event_decisions EventDecisions[]
  usersLiked      UsersLikedMeals[]
  usersdisiked    UsersDislikedMeals[]

  @@map("meals")
}

model Place {
  id              Int                   @id @default(autoincrement())
  title           String                @db.VarChar(80)
  location        String?
  rating          Int?
  createdAt       DateTime              @default(now()) @map("created_at")
  updatedAt       DateTime              @updatedAt @map("updated_at")
  urlImage        String?               @db.VarChar(255)
  event_decisions EventDecisions[]
  usersLiked      UsersLikedPlaces[]
  usersDisliked   UsersDislikedPlaces[]

  @@map("places")
}

model UsersLikedMovies {
  id        Int               @id @default(autoincrement())
  movieId   Int
  userId    Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  movie     Movie    @relation(fields: [movieId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([movieId, userId])
  @@map("users_liked_movies")
}

model UsersLikedMeals {
  id        Int               @id @default(autoincrement())
  mealId    Int
  userId    Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  meal      Meal     @relation(fields: [mealId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([mealId, userId])
  @@map("users_liked_meals")
}

model UsersLikedPlaces {
  id        Int               @id @default(autoincrement())
  placeId   Int
  userId    Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  place     Place    @relation(fields: [placeId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([placeId, userId])
  @@map("users_liked_places")
}

model UsersDislikedMovies {
  id        Int               @id @default(autoincrement())
  movieId   Int
  userId    Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  movie     Movie    @relation(fields: [movieId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([movieId, userId])
  @@map("users_disliked_movies")
}

model UsersDislikedMeals {
  id        Int               @id @default(autoincrement())
  mealId    Int
  userId    Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  meal      Meal     @relation(fields: [mealId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([mealId, userId])
  @@map("users_disliked_meals")
}

model UsersDislikedPlaces {
  id        Int               @id @default(autoincrement())
  placeId   Int
  userId    Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  place     Place    @relation(fields: [placeId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([placeId, userId])
  @@map("users_disliked_places")
}

model EventDecisions {
  id         Int      @id @default(autoincrement())
  eventId    Int
  movieId    Int?
  mealId     Int?
  placeId    Int?
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  events     Event    @relation(fields: [eventId], references: [id])
  meals      Meal?    @relation(fields: [mealId], references: [id])
  movies     Movie?   @relation(fields: [movieId], references: [id])
  places     Place?   @relation(fields: [placeId], references: [id])

  @@map("event_decisions")
}
