// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  username      String   @unique
  email         String   @unique
  password      String
  age           Int?
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  likedMovies   UsersLikedMovies[]
  likedMeals    UsersLikedMeals[]
  likedPlaces   UsersLikedPlaces[]
  event         UserInEvent[]

  @@map("users")
}

model Event {
  id           Int          @id @default(autoincrement())
  name         String       @db.VarChar(80)
  plannedDate  DateTime
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")
  users        UserInEvent[]
  roomDecision RoomDecision[]
  
  @@map("events")
}

//relación explícita muchos a muchos: usuarios y eventos
model UserInEvent {
  userId        Int
  user          User     @relation(fields:[userId], references: [id])
  eventId       Int
  event         Event    @relation(fields: [eventId], references:[id])
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  
  @@unique([userId, eventId])
  @@map("users_in_event")
}

model Movie {
  id               Int      @id @default(autoincrement())
  title            String   @db.VarChar(80)
  urlImage         String?  @db.VarChar(255)
  description      String?  @db.Text
  duration         Int?
  genre            String   @db.VarChar(50)
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  usersLiked       UsersLikedMovies[]
  roomDecisions    RoomDecision[]

  @@map("movies")
}

model Meal {
  id               Int      @id @default(autoincrement())
  name             String   @db.VarChar(80)
  urlImage         String?  @db.VarChar(255)
  description      String?  @db.Text
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  usersLiked       UsersLikedMeals[]
  roomDecisions    RoomDecision[]

  @@map("meals")
}

model Place {
  id               Int      @id @default(autoincrement())
  title            String   @db.VarChar(80)
  urlImage         String?  @db.VarChar(255)
  location         String?  @db.Text
  rating           Int?
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  usersLiked       UsersLikedPlaces[]
  roomDecisions    RoomDecision[]

  @@map("places")
}

model UsersLikedMovies {
  movie       Movie @relation(fields: [movieId], references: [id])
  movieId     Int
  user        User @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  @@unique([movieId, userId])
  @@map("users_liked_movies")
}

model UsersLikedMeals {
  meal        Meal @relation(fields: [mealId], references: [id])
  mealId      Int
  user        User @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  @@unique([mealId, userId])
  @@map("users_liked_meals")
}


model UsersLikedPlaces {
  place       Place @relation(fields: [placeId], references: [id])
  placeId     Int
  user        User @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  @@unique([placeId, userId])
  @@map("users_liked_places")
}

model RoomDecision {
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   Int      @unique
  movie     Movie?    @relation(fields: [movieId], references: [id])
  movieId   Int?
  meal      Meal?     @relation(fields: [mealId], references: [id])
  mealId    Int?
  place     Place?    @relation(fields: [placeId], references: [id])
  placeId   Int?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("room_decisions")
}